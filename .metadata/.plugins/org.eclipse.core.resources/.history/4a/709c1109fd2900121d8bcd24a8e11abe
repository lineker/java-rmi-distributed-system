package TransactionManager;

import java.rmi.RemoteException;
import java.util.Enumeration;
import java.util.Hashtable;

import ResImpl.RMHashtable;
import ResInterface.ResourceManager;

public class TransactionManager {

	protected Hashtable<Integer,Hashtable<Integer,String>> m_transactionManager = new Hashtable<Integer,Hashtable<Integer,String>>();
	
	public TransactionManager()
	{
		
	}
	
	public int countTransactions()
	{
		return m_transactionManager.size();
	}
	
	public boolean containsTransaction(int TID)
	{
		return m_transactionManager.containsKey(TID);
	}
	
	public int start()
	{
		int TID =  m_transactionManager.size()+1;
		//make sure is unique
		while(m_transactionManager.containsKey(TID))
		{
			TID++;
		}
		m_transactionManager.put(TID, new Hashtable<Integer,String>());
		return TID;
	}
	
	public boolean commit(int TID,RMHashtable rms) throws RemoteException, TransactionAbortedException, InvalidTransactionException
	{
		Hashtable<Integer,String> ht = m_transactionManager.get(TID);
		//loop and send commit to each RM that 
		Enumeration e = ht.keys();
		boolean result = false;
	    //iterate through Hashtable keys Enumeration
	    while(e.hasMoreElements())
	    {
	    	int tid_from_rm = (int)e.nextElement();
	    	String rm_name = ht.get(tid_from_rm);
	    	ResourceManager r = (ResourceManager) rms.get(rm_name);
			if(r != null)
			{
				result  = r.commit(tid_from_rm);
			}
			if(!result)
			{
				System.out.println("RM : "+rm_name+" failed to commit");
				return false; //some RM failed to commit
			}
	  	}
	    
	  //clean transaction reference
		Object n = m_transactionManager.remove(TID);
		if(n == null)
			return false;
		return true;
	}
	
	public void abort(int TID, RMHashtable rms) throws RemoteException, InvalidTransactionException
	{
		Hashtable<Integer,String> ht = m_transactionManager.get(TID);
		//loop and send abort to each RM that 
		Enumeration e = ht.keys();
		boolean result = false;
	    //iterate through Hashtable keys Enumeration
	    while(e.hasMoreElements())
	    {
	    	int tid_from_rm = (int)e.nextElement();
	    	String rm_name = ht.get(tid_from_rm);
	    	ResourceManager r = (ResourceManager) rms.get(rm_name);
			if(r != null)
			{
				r.abort(tid_from_rm);
			}
	  	}
	    
	  //remove transaction from transaction Manager
		m_transactionManager.remove(TID);
	}
	
	public void shutdown(int TID,  RMHashtable rms)
	{
		Hashtable<Integer,String> ht = m_transactionManager.get(TID);
		//loop and send abort to each RM that 
		Enumeration e = ht.keys();
		boolean result = false;
	    //iterate through Hashtable keys Enumeration
	    while(e.hasMoreElements())
	    {
	    	
	    
	    }
	}
}
